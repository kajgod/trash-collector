{"version":3,"sources":["../../src/classes/settings.class.ts","../../src/classes/element.class.ts","../../src/scripts/types.ts","../../src/classes/player.class.ts","../../src/classes/bush.class.ts","../../src/classes/trash.class.ts","../../src/classes/animal.class.ts","../../src/levels/1.ts","../../src/levels/2.ts","../../src/levels/3.ts","../../src/levels/levels.ts","../../src/scripts/actions.ts","../src/main.ts"],"names":[],"mappings":"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","file":"main.507bd2dc.js","sourceRoot":"../build","sourcesContent":["export default class Settings {\n  resolution = 16;\n  public static readonly resolution: number = 16;\n  step: number = 8;\n  sprite: HTMLDivElement;\n  playerSize: string;\n\n  constructor(\n    public element: HTMLElement,\n    public elementClasses: string,\n    public x: number,\n    public y: number\n  ) {\n    this.playerSize = this.getPlayerSize();\n  }\n\n  createElement() {\n    this.sprite = document.createElement(\"div\");\n    this.sprite.setAttribute(\"class\", this.elementClasses);\n    this.sprite.style.width = this.playerSize;\n    this.sprite.style.height = this.playerSize;\n    this.sprite.style.left = this.posX();\n    this.sprite.style.top = this.posY();\n    this.element.appendChild(this.sprite);\n  }\n\n  getPlayerSize(): string {\n    const percent: number = 100 / this.resolution;\n    return `${percent.toString()}%`;\n  }\n\n  posX(): string {\n    const percent: number = ((this.x - 1) * 100) / this.resolution;\n    return `${percent.toString()}%`;\n  }\n\n  posY(): string {\n    const percent: number = ((this.y - 1) * 100) / this.resolution;\n    return `${percent.toString()}%`;\n  }\n}\n","import Settings from \"./settings.class\";\n\nexport default class Element extends Settings {\n  offsetX: number = 0;\n  offsetY: number = 0;\n  constructor(\n    public x: number,\n    public y: number,\n    public element: HTMLElement,\n    public elementClasses: string\n  ) {\n    super(element, elementClasses, x, y);\n    this.createElement();\n  }\n\n  left() {\n    this.offsetX = this.offsetX - this.step;\n    this.execMove();\n  }\n\n  right() {\n    this.offsetX = this.offsetX + this.step;\n    this.execMove();\n  }\n\n  up() {\n    this.offsetY = this.offsetY - this.step;\n    this.execMove();\n  }\n\n  down() {\n    this.offsetY = this.offsetY + this.step;\n    this.execMove();\n  }\n\n  execMove() {\n    this.sprite.style.transform = `translate3d(${this.offsetX}%, ${this.offsetY}%, 0)`;\n  }\n\n  coordinates(): number[] {\n    return [\n      (this.x * 100) / this.resolution + (this.offsetX * 1) / this.resolution,\n      (this.y * 100) / this.resolution + (this.offsetY * 1) / this.resolution,\n    ];\n  }\n}\n","import Player from \"../classes/player.class\";\nimport Bush from \"../classes/bush.class\";\nimport Trash from \"../classes/trash.class\";\nimport Animal from \"../classes/animal.class\";\n\nexport enum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nexport interface Game {\n  player: Player;\n  bushes: Bush[];\n  trashes: Trash[];\n  animals: Animal[];\n  setActive: (arg0: boolean) => void;\n  hideOpeningTitle: ()=>void;\n}\n","import Element from \"./element.class\";\nimport { Direction } from \"../scripts/types\";\n\nexport default class Player extends Element {\n  artDiv: HTMLDivElement;\n\n  constructor(\n    public x: number,\n    public y: number,\n    element: HTMLElement,\n    elementClasses: string,\n    public direction: Direction\n  ) {\n    super(x, y, element, elementClasses);\n    this.prepareElement();\n  }\n\n  prepareElement() {\n    this.artDiv = document.createElement(\"div\");\n    this.artDiv.setAttribute(\"class\", \"player right\");\n    this.sprite.appendChild(this.artDiv);\n    \n  }\n\n  newLevel(nX: number, nY: number, nD: Direction) {\n    this.x = nX;\n    this.y = nY;\n    this.direction = nD;\n    this.artDiv.setAttribute(\"class\", \"player right\");\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.sprite.style.left = this.posX();\n    this.sprite.style.top = this.posY();\n  }\n\n  move() {\n    switch (this.direction) {\n      case Direction.Right:\n        this.right();\n        break;\n      case Direction.Left:\n        this.left();\n        break;\n      case Direction.Up:\n        this.up();\n        break;\n      case Direction.Down:\n        this.down();\n        break;\n    }\n  }\n\n  switchDirection(dir: string) {\n    switch (this.direction) {\n      case Direction.Right:\n        this.artDiv.classList.toggle(\"right\");\n        break;\n      case Direction.Left:\n        this.artDiv.classList.toggle(\"left\");\n        break;\n      case Direction.Up:\n        this.artDiv.classList.toggle(\"up\");\n        break;\n      case Direction.Down:\n        this.artDiv.classList.toggle(\"down\");\n        break;\n    }\n    switch (dir) {\n      case \"ArrowRight\":\n        this.artDiv.classList.toggle(\"right\");\n        this.direction = Direction.Right;\n        break;\n      case \"ArrowLeft\":\n        this.artDiv.classList.toggle(\"left\");\n        this.direction = Direction.Left;\n        break;\n      case \"ArrowUp\":\n        this.artDiv.classList.toggle(\"up\");\n        this.direction = Direction.Up;\n        break;\n      case \"ArrowDown\":\n        this.artDiv.classList.toggle(\"down\");\n        this.direction = Direction.Down;\n        break;\n    }\n  }\n}\n","import Element from \"./element.class\";\nimport { Direction } from \"../scripts/types\";\n\nexport default class Bush extends Element {\n  constructor(\n    x: number,\n    y: number,\n    element: HTMLElement,\n    elementClasses: string,\n    public direction: Direction\n  ) {\n    super(x, y, element, elementClasses);\n  }\n}\n","import Element from \"./element.class\";\nimport { Direction } from \"../scripts/types\";\n\nexport default class Trash extends Element {\n  constructor(\n    x: number,\n    y: number,\n    element: HTMLElement,\n    elementClasses: string,\n    public direction: Direction\n  ) {\n    super(x, y, element, elementClasses);\n  }\n\n  collected(){\n    this.sprite.remove();\n  }\n}\n","import Element from \"./element.class\";\nimport { Direction } from \"../scripts/types\";\n\nexport default class Animal extends Element {\n  constructor(\n    x: number,\n    y: number,\n    element: HTMLElement,\n    elementClasses: string,\n    public direction: Direction\n  ) {\n    super(x, y, element, elementClasses);\n  }\n\n  move() {\n    switch (this.direction) {\n      case Direction.Right:\n        this.right();\n        break;\n      case Direction.Left:\n        this.left();\n        break;\n      case Direction.Up:\n        this.up();\n        break;\n      case Direction.Down:\n        this.down();\n        break;\n    }\n  }\n\n  switchDirection() {\n    switch (this.direction) {\n      case Direction.Right:\n        this.direction = Direction.Left;\n        break;\n      case Direction.Left:\n        this.direction = Direction.Right;\n        break;\n      case Direction.Up:\n        this.direction = Direction.Down;\n        break;\n      case Direction.Down:\n        this.direction = Direction.Up;\n        break;\n    }\n  }\n\n}\n","const level: string = `\nBBBBBBBBBBBBBBBB\nBB00B000000000BB\nB000B0000000000B\nB00000000000000B\nB00000T000T00BBB\nB0000000B000000B\nBP00000BBB00000B\nB0000000B000000B\nB00000T000T0000B\nB00000000000000B\nB00000000000000B\nBBB000000000000B\nB00000000000000B\nB0000000000B000B\nBB000000000B00BB\nBBBBBBBBBBBBBBBB\n`;\nexport default level;\n","const level: string = `\nBBBBBBBBBBBBBBBB\nB00000000000000B\nB0000T000000000B\nB00000000000000B\nB000B00A000B000B\nB00000000000000B\nB00000000000000B\nBP0000000000000B\nB00000000000000B\nB00000000000000B\nB00000000000000B\nB000B000A00B000B\nB00000000000000B\nB0000000000T000B\nB00000000000000B\nBBBBBBBBBBBBBBBB\n`;\nexport default level;\n","const level: string = `\nBBBBBBBBBBBBBBBB\nB0000000B000000B\nB00000000000000B\nB000B00T0000000B\nB00000000000000B\nB00000000000000B\nB000000000000A0B\nBP0000000B00000B\nB0000A000000000B\nB00000000000000B\nB00000000000000B\nB00B00000A00T00B\nB00000000000000B\nB00T00000B000B0B\nB00T00000B000B0B\nBBBBBBBBBBBBBBBB\n`;\nexport default level;\n","import level1 from \"./1\";\nimport level2 from \"./2\";\nimport level3 from \"./3\";\n\nconst levels: string[] = [level1, level2, level3];\n\nexport default levels;\n","import Player from \"../classes/player.class\";\nimport Bush from \"../classes/bush.class\";\nimport Trash from \"../classes/trash.class\";\nimport Animal from \"../classes/animal.class\";\nimport { Direction, Game } from \"../scripts/types\";\nimport levels from \"../levels/levels\";\nimport { ticker } from \"../main\";\nimport Settings from \"../classes/settings.class\";\n\nlet player: Player,\n  bushes: Bush[] = [],\n  trashes: Trash[] = [],\n  animals: Animal[] = [],\n  level: number,\n  mountGame: HTMLElement;\n\nconst startLevel = (levelNo: number, target: HTMLElement): Game => {\n  level = levelNo;\n  mountGame = target;\n  const charList: string[] = levels[level].split(/\\n/);\n  for (let y: number = 1; y <= Settings.resolution; y++)\n    for (let x: number = 1; x <= Settings.resolution; x++) {\n      let cur: string = charList[y][x - 1];\n      switch (cur) {\n        case \"0\":\n          break;\n        case \"P\":\n          if (!player) {\n            // start game\n            player = new Player(\n              x,\n              y,\n              mountGame,\n              \"element persistent\",\n              Direction.Right\n            );\n          } else {\n            // new level\n            player.newLevel(x, y, Direction.Right);\n          }\n          break;\n        case \"B\":\n          bushes.push(new Bush(x, y, mountGame, \"element bush\", null));\n          break;\n        case \"T\":\n          trashes.push(new Trash(x, y, mountGame, \"element trash\", null));\n          break;\n        case \"A\":\n          animals.push(\n            new Animal(\n              x,\n              y,\n              mountGame,\n              \"element animal\",\n              Math.random() >= 0.5 ? Direction.Right : Direction.Down\n            )\n          );\n          break;\n      }\n    }\n  const setActive = (v: boolean): void => {\n    window.active = v;\n  };\n  const hideOpeningTitle = () => {\n    document.getElementById(\"opening-title\").style.display = 'none';\n  }\n  return {\n    player,\n    bushes,\n    trashes,\n    animals,\n    setActive,\n    hideOpeningTitle\n  };\n};\n\nconst nextLevel = () => {\n  //clear last level\n  bushes.length = 0;\n  trashes.length = 0;\n  animals.length = 0;\n  const children = mountGame.children;\n  while (children[0] && children[1]) {\n    [0, 1].map(\n      (v) =>\n        !children[v].classList.contains(\"persistent\") && children[v].remove()\n    );\n  }\n  startLevel(level + 1, mountGame);\n};\n\nconst firstLevel = () => {\n  level = -1;\n  nextLevel();\n};\n\nconst checkCollisions = (game: Game) => {\n  const diff: number = 100 / player.resolution;\n  const check = (x1: number, y1: number, x2: number, y2: number): boolean => {\n    if (x1 === x2 || (x1 > x2 && x1 < x2 + diff) || (x2 > x1 && x2 < x1 + diff))\n      if (\n        y1 === y2 ||\n        (y1 > y2 && y1 < y2 + diff) ||\n        (y2 > y1 && y2 < y1 + diff)\n      )\n        return true;\n    return false;\n  };\n  // player\n  {\n    let [x1, y1]: number[] = player.coordinates();\n    if (x1 % player.resolution !== 0 && y1 % player.resolution !== 0) {\n      bushes.map((bush) => {\n        let [x2, y2]: number[] = bush.coordinates();\n        if (check(x1, y1, x2, y2)) endGame();\n      });\n      animals.map((animal) => {\n        let [x2, y2]: number[] = animal.coordinates();\n        if (check(x1, y1, x2, y2)) endGame();\n      });\n      trashes.map((trash, key) => {\n        let [x2, y2]: number[] = trash.coordinates();\n        if (check(x1, y1, x2, y2)) {\n          trash.collected();\n          delete trashes[key];\n          checkCompletedLevel();\n        }\n      });\n    }\n  }\n  // animal\n  animals.map((animal) => {\n    let [x1, y1]: number[] = animal.coordinates();\n    bushes.map((bush) => {\n      let [x2, y2]: number[] = bush.coordinates();\n      if (check(x1, y1, x2, y2)) animal.switchDirection();\n    });\n  });\n};\n\nconst endGame = () => {\n  window.active = false;\n  alert(`You are dead! You managed to complete ${level} levels.`);\n  firstLevel();\n};\n\nconst checkCompletedLevel = () => {\n  for (let i: number = 0; i < trashes.length; i++) {\n    if (trashes[i]) return;\n  }\n  if (level < levels.length - 1) {\n    nextLevel();\n    return;\n  }\n  window.active = false;\n  alert(`Well done! You completed all ${level + 1} levels!`);\n  firstLevel();\n};\n\nexport { startLevel, endGame, checkCollisions };\n","import { startLevel, checkCollisions } from \"./scripts/actions\";\nimport { Game } from \"./scripts/types\";\nimport Player from \"./classes/player.class\";\nimport Animal from \"./classes/animal.class\";\n\nconst mountGame: HTMLElement = document.getElementById(\"mount-game\");\n\nconst game: Game = startLevel(0, mountGame);\nconst player: Player = game.player;\nconst animals: Animal[] = game.animals;\n\ndeclare global {\n  interface Window { active: boolean; }\n}\n\nwindow.active = false; // global activity\nconst ticker = setInterval(() => {\n  if (window.active) {\n    player.move();\n    animals.map((animal) => {\n      animal.move();\n    });\n    checkCollisions(game);\n  }\n}, 100 / 3);\n\ndocument.addEventListener(\"keydown\", (e: KeyboardEvent) => {\n  if (!window.active) {\n    window.active = true;\n    game.hideOpeningTitle();\n  }\n  player.switchDirection(e.code);\n});\n\nexport { ticker };\n"]}